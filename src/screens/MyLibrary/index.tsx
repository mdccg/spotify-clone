import { useState } from 'react';
import MatheusGomes from './../../../assets/images/matheus-gomes.jpg';
import TagGroup from './../../components/TagGroup';
import ArtistType from './../../types/ArtistType';
import PlaylistType from './../../types/PlaylistType';
import { ChangeViewContainer, FilterContainer, Header, Heading, IconContainer, IconGroup, ListSolidIcon, MagnifyingGlassSolidIcon, MyLibraryContainer, MyProfileContainer, MyProfilePicture, SavedStuffContainer, SelectedClassification, SortByContainer, SortSolidIcon, SortSolidIconContainer, SquaresRegularIcon, TagGroupWrapper, TinyPlusSolidIcon } from './styles';
import PlaylistItemList from './../../components/PlaylistItemList';
import { isArtist } from './../../utils';
import { StyleSheet } from 'react-native';

const MyLibrary = () => {
  const [selectedFilter, setSelectedFilter] = useState<string | undefined>();
  const [filters] = useState<string[]>(['Playlists', 'Álbuns', 'Artistas', 'Baixado']);
  const [selectedClassification] = useState<string>('Recentes');
  const [classifications] = useState<string[]>(['Recentes', 'Adicionados recentemente', 'Ordem alfabética', 'Criador']);
  const [viewAsList, setViewAsList] = useState<boolean>(true);
  const [playlists] = useState<(PlaylistType | ArtistType)[]>([
    { title: 'Músicas Curtidas', imageUrl: require('./../../../assets/images/musicas-curtidas.png'), category: 'Playlist', songCount: 320, isPinned: true, isDownloaded: true },
    { title: 'Mullholand Drive', imageUrl: require('./../../../assets/images/mullholand-drive.jpeg'), category: 'Álbum', author: 'Eyedress', isDownloaded: true },
    { title: 'Mix relax', imageUrl: require('./../../../assets/images/mix-relax.jpeg'), category: 'Playlist', autoGenerated: true, isDownloaded: true },
    { title: 'Mix romântico', imageUrl: require('./../../../assets/images/mix-romantico.jpeg'), category: 'Playlist', autoGenerated: true, isDownloaded: true },
    { title: 'Mix de Kings of Leon', imageUrl: require('./../../../assets/images/mix-de-kings-of-leon.jpeg'), category: 'Playlist', author: 'Spotify', isDownloaded: true },
    { title: 'Adeus, Aurora (Deluxe)', imageUrl: require('./../../../assets/images/adeus-aurora-deluxe.jpeg'), category: 'Álbum', author: 'Supercombo', isDownloaded: true },
    { title: 'Rogério', imageUrl: require('./../../../assets/images/rogerio.jpeg'), category: 'Álbum', author: 'Supercombo', isDownloaded: true },
    { title: 'Adeus, Aurora', imageUrl: require('./../../../assets/images/adeus-aurora.jpeg'), category: 'Álbum', author: 'Supercombo', isDownloaded: true },
    { title: 'Festa?', imageUrl: require('./../../../assets/images/festa-album-supercombo.jpeg'), category: 'Álbum', author: 'Supercombo', isDownloaded: true },
    { title: 'AM', imageUrl: require('./../../../assets/images/am.jpeg'), category: 'Álbum', author: 'Arctic Monkeys', isDownloaded: true },
    { title: 'Favourite Worst Nightmare', imageUrl: require('./../../../assets/images/favourite-worst-nightmare.jpeg'), category: 'Álbum', author: 'Arctic Monkeys', isDownloaded: true },
    { title: 'Sal Grosso', imageUrl: require('./../../../assets/images/sal-grosso.jpeg'), category: 'Álbum', author: 'Supercombo', isDownloaded: true },
  ]);

  const selectFilter = (newFilter: string) => {
    setSelectedFilter(newFilter === selectedFilter ? undefined : newFilter);
  }

  return (
    <MyLibraryContainer contentContainerStyle={styles.myLibraryContainer}>
      <Header>
        <MyProfileContainer>
          <MyProfilePicture source={MatheusGomes} />
          <Heading>Sua Biblioteca</Heading>
        </MyProfileContainer>

        <IconGroup>
          <IconContainer>
            <MagnifyingGlassSolidIcon />
          </IconContainer>

          <IconContainer>
            <TinyPlusSolidIcon />
          </IconContainer>
        </IconGroup>
      </Header>

      <TagGroupWrapper>
        <TagGroup
          selectedFilter={selectedFilter}
          setSelectedFilter={setSelectedFilter}
          filters={filters}
          selectFilter={selectFilter}
          isFixed={false} />
      </TagGroupWrapper>

      <SavedStuffContainer>
        <FilterContainer>
          <SortByContainer>
            <SortSolidIconContainer>
              <SortSolidIcon />
            </SortSolidIconContainer>
            
            <SelectedClassification>{selectedClassification}</SelectedClassification>
          </SortByContainer>

          <ChangeViewContainer onPress={() => setViewAsList(!viewAsList)}>
            {viewAsList ? <SquaresRegularIcon /> : <ListSolidIcon />}
          </ChangeViewContainer>
        </FilterContainer>

        {playlists.map((object) => (
          isArtist(object) ? (
            <></>
          ) : (
            <PlaylistItemList key={object.title} playlist={object} />
          )
        ))}
      </SavedStuffContainer>
    </MyLibraryContainer>
  );
}

const styles = StyleSheet.create({
  myLibraryContainer: {
    paddingBottom: 160,
  },
});

export default MyLibrary;